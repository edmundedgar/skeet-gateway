// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import {Test, console} from "forge-std/Test.sol";
import {DidProofLoader} from "./DidProofLoader.sol";
import {Vm} from "forge-std/Vm.sol";
import {DidVerifier} from "../src/DidVerifier.sol";
import {console} from "forge-std/console.sol";

contract DidVerifierClient is DidVerifier {
    function callSeparateSignature(bytes calldata entry) public pure returns (bytes memory, bytes32, uint256) {
        bytes calldata sig;
        bytes32 entryHash;
        uint256 cursor;
        (sig, entryHash, cursor) = separateSignature(entry);
        return (sig, entryHash, cursor);
    }
}

contract DidVerifierTest is Test, DidProofLoader {
    DidVerifierClient didVerifier;

    function setUp() public {
        didVerifier = new DidVerifierClient();
    }

    function testSeparateSignature() public view {
        bytes memory entryWithSig = bytes(
            hex"a763736967785641316d464e46664c417637627651734e4a656a4346593559624f663276742d4a326c71565f744d685571305356615966474f71484f4e79616878475f5339314c65484f623079705565636e3133444158514979635a516470726576783b626166797265696436676b366d6537716f746f656a79683474626d6f68756e69753337616e666762366c687232706f33627471616e6e737333647164747970656d706c635f6f7065726174696f6e687365727669636573a16b617470726f746f5f706473a264747970657819417470726f746f506572736f6e616c4461746153657276657268656e64706f696e74782b68747470733a2f2f6c696f6e736d616e652e75732d656173742e686f73742e62736b792e6e6574776f726b6b616c736f4b6e6f776e417381781c61743a2f2f65646d756e6465646761722e62736b792e736f6369616c6c726f746174696f6e4b6579738278396469643a6b65793a7a513373686843475571444b6a53747a754478506b54784e36756a64645034526b454b4a4a6f754a4752526b614c47626778396469643a6b65793a7a51337368704b6e62645078336733436d5066356352565450653148745377566e356973683377536e44505143624c4a4b73766572696669636174696f6e4d6574686f6473a167617470726f746f78396469643a6b65793a7a513373685251576d577845747852613331377270596e566f376e57785941734453346d427764444c674c666b6b447452"
        );
        bytes32 siglessHash = sha256(
            bytes(
                hex"a66470726576783b626166797265696436676b366d6537716f746f656a79683474626d6f68756e69753337616e666762366c687232706f33627471616e6e737333647164747970656d706c635f6f7065726174696f6e687365727669636573a16b617470726f746f5f706473a264747970657819417470726f746f506572736f6e616c4461746153657276657268656e64706f696e74782b68747470733a2f2f6c696f6e736d616e652e75732d656173742e686f73742e62736b792e6e6574776f726b6b616c736f4b6e6f776e417381781c61743a2f2f65646d756e6465646761722e62736b792e736f6369616c6c726f746174696f6e4b6579738278396469643a6b65793a7a513373686843475571444b6a53747a754478506b54784e36756a64645034526b454b4a4a6f754a4752526b614c47626778396469643a6b65793a7a51337368704b6e62645078336733436d5066356352565450653148745377566e356973683377536e44505143624c4a4b73766572696669636174696f6e4d6574686f6473a167617470726f746f78396469643a6b65793a7a513373685251576d577845747852613331377270596e566f376e57785941734453346d427764444c674c666b6b447452"
            )
        );
        //bytes memory expectedSig = bytes(hex"dbe1b80fd61714207a2d3aef6a5ab6de8eef7b2d56eca7125437fe2247d4ff1f001405549f656dc525d3b4232be6d01eef62b23d2cf3c3491a57433cf09b8210");
        bytes memory expectedSig = bytes(
            hex"0359853457cb02fedbbd0b0d25e8c2158e586ce7f6bedf89da5a95fed32152ad1255a61f18ea8738dc9a8711bf4bdd4b78739bd32a5479c9f5dc3017408c9c651b"
        );
        bytes32 entryHash;
        uint256 cursor;
        bytes memory sig;
        (sig, entryHash, cursor) = didVerifier.callSeparateSignature(entryWithSig);
        assertEq(entryHash, siglessHash, "should match hash of sigless cbor made in python");
        //console.logBytes(sig);
        //console.logBytes(expectedSig);
        //assertEq(keccak256(sig), keccak256(expectedSig), "sig should match sig made in python");
    }
}
